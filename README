### Universidade Federal da Fronteira Sul - Campus Chapecó
### Ciência da Computação - Sistemas Operacionais – 2022.2
### Prof. Marco Aurélio Spohn
### Acadêmicos: **Carlos Eduardo Thomas, Daniel Salvini, Pedro Zawadzki Dutra**

# **Desenvolvendo um Escalonador em XV6**

### **Objetivo geral:** 
- Desenvolver conhecimento e prática de implementação de um componente básico (i.e.,
escalonador de processos) em um sistema operacional didático.

### **Objetivos específicos:**
- Estudar o código de uma implementação do Unix versão 6 para a plataforma Intel (xv6, desenvolvido no MIT); 
- Analisar e planejar a implementação de dois escalonadores de processos; 
- Implementar os escalonadores; 
- Avaliar os escalonadores através de experimentos

### **Plataforma:**
- xv6 → http://pdos.csail.mit.edu/6.828/2012/xv6.html

### **Descrição do Trabalho I:**
- Implementar o escalonador de processos baseado em loteria (lottery
scheduling). Na instanciação de um processo, deve-se passar ao sistema a quantidade de bilhetes
que o novo processo recebe. Caso o usuário não forneça esse dado, o sistema assume um número
default de bilhetes. Assumir também um número máximo de bilhetes que um processo pode receber.

### **Descrição do Trabalho II:**
- Implementar o escalonador de processos stride scheduling (escalonamento em
passos largos). Semelhante ao escalonamento por loteria, cada processo recebe um número fixo de bilhetes
(tickets). Ao invés de utilizar um sorteio (abordagem probabilística), calcula-se o “passo” (stride) de cada
processo como sendo o resultado da divisão de um valor constante (e.g., 10.000) pelo número de bilhetes do
processo. Cada processo inicia com uma “passada inicial” igual a zero (0). O escalonador seleciona o
processo com o menor valor de passada atual; portanto, inicialmente qualquer um dos processos prontos
pode ser selecionado. Nesse caso, utiliza-se um critério qualquer para desempate (e.g., o processo com o
maior PID é selecionado). Após selecionado, a passada do processo é incrementada com o valor do “passo”
do processo. Por exemplo, assuma que há 3 processos, A, B e C, cada um com 100, 50 e 250 bilhetes,
respectivamente; portanto, A tem passo 100, B tem passo 200 e C tem passo 40. Caso o processo A seja
selecionado inicialmente, a sua passada é atualizada para 100. Em seguida B e C ainda tem passada zero.
Vamos assumir que B seja escalonado, atualizando sua passada para 200. Em seguida, o processo
necessariamente selecionado é o C (passada ainda é zero), fazendo sua passada ser atualizada para 40. Em
sequência, o processo C é selecionado mais duas vezes seguidas até atingir uma passada maior que o
processo A (passada = 100). Essa abordagem torna o escalonamento determinístico, concedendo
rapidamente uma fração da CPU correspondente ao número de bilhetes de cada processo.


## **Instalando o projeto na WSL:**
> `sudo apt-get update` <br>
> `sudo apt-get install qemu` <br>
> `sudo apt-get install make` <br>
> `sudo apt-get install libc6-i386 libc6-dev-i386` <br>
> `sudo apt install qemu-system-x86` <br>
> `git clone https://github.com/Dutraz/escalonador-xv6 xv6` <br>
> `chmod 700 -R xv6` <br>
> `cd xv6` <br>
> `make` <br>
> `make qemu-nox` <br>





---

## **Testando o projeto**

- Para compilar ambos os projetos basta rodar o comando:

> make clean; make; make qemu-nox

- Após isso, no lottery-scheduller (T1), basta rodar:

> lotterytest

e no stride-scheduller (T2), rode:

> stridetest

Em ambos os projetos, o comando irá inicializar diversos processos com 
tickets de forma quadrática que irão rodar de forma intermitente, apenas 
consumindo processamento, com o propósito de visualizar quantas vezes
serão colocados em processamento pelo escalonador.

Estes dados podem ser analisados em tempo real por meio de um dos 
processos do programa de testes que imprime uma tabela com dados básicos
dos processos ativos do sistema. A tabela contém o nome do processo,
a quantidade de tickets (coluna TKTS) que ele possui e a quantidade de 
vezes que foi colocado em execução pelo escalonador (RUN).

Durante os testes sempre será possível observar uma anomalia na quantidade 
de execuções do último processo instanciado, que também é o com mais tickets, 
comparada com os demais processos. Essa anomalia se dá pelo fato de que o último
processo do programa de testes sempre será o responsável por imprimir a tabela
contendo as informações dos processos para o usuário. Para que a visualização
da mesma fique mais agradável ao usuário foi necessário implementar uma frequência
de atualizações do terminal, o que acaba por colocar o processo em espera (sleep)
por alguns milissegundos e impedindo-o de ser escolhido pelo escalonador.


---

NOTE: we have stopped maintaining the x86 version of xv6, and switched
our efforts to the RISC-V version
(https://github.com/mit-pdos/xv6-riscv.git)

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also https://pdos.csail.mit.edu/6.828/, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by Silas
Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, eyalz800,
Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter
Froehlich, Yakir Goaron,Shivam Handa, Bryan Henry, Jim Huang, Alexander
Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Eddie Kohler, Austin
Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi
Merimovich, Mark Morrissey, mtasm, Joel Nider, Greg Price, Ayan Shafqat,
Eldar Sehayek, Yongming Shen, Cam Tenny, tyfkda, Rafael Ubal, Warren
Toomey, Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas
Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang Wei.

The code in the files that constitute xv6 is
Copyright 2006-2018 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

We don't process error reports (see note on top of this file).

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run
"make". On non-x86 or non-ELF machines (like OS X, even on x86), you
will need to install a cross-compiler gcc suite capable of producing
x86 ELF binaries (see https://pdos.csail.mit.edu/6.828/).
Then run "make TOOLPREFIX=i386-jos-elf-". Now install the QEMU PC
simulator and run "make qemu".
